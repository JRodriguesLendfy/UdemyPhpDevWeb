ATALHOS no VSCODE

header.cabecalho = cria o header, com a classe cabeçalho;
header#principal = cria o header, com o ID principal;
div[teste] = cria DIV, com prioridade chamada teste;
--------------------------------------------------------
    No arquivo teste.php, cria um conteúdo, após a criação do conteúdo, podemos 
buscas as informações através do método $_GET da seguinte forma:
      
        <?php
                include($_GET['dir'] . "/" . $_GET['file'] . ".php");
                ou
                include(__DIR__ . "/{$_GET['dir']}/{$_GET['file']}.php"); //utilizando caminho absoluto
            ?>



    Incluindo uma requisição denominando o diretório.
   
    http://localhost/UdemyPhpDevWeb/exercicio.php?dir=teste&file=teste

    Realizando o GET no link referenciado

-------------------------------------------------------

    Existem muitos arquivos puramente escrito em PHP:
    - Arquivos interagindo dentro da página PHP;
    - Incluir arquivos dinamicos no HTML;
    - Incluir outros arquivos dentro do HTML;
    - Arquivos inteiramente PHP que não estarão no HTML;

--------------------------------------------------------

Sentenças do PHP:

echo = Print;

---------------------------------------------------------
Pesquisar:

Tags PHP;

---------------------------------------------------------
Atribuição por Valor VS Referência

Valor -  É feito uma cópia do valor, e esta cópia será dada para outra 
variável em outro espaço da memória;

Referência - Enquanto atribuição por Referência, a variável é alocada para 
o mesmo endereço de memória da principal;
-----------------------------------------------------------

"" = String vazia, é lida como null/0;
" " = String com um espaço, já é denominada como True;

------------------------------------------------------------

'' aspas simples - São apenas Strings, não é interpretativa;
"" aspas duplas - Podem conter variáveis que serão convertidas em string na hora de executar.
-------------------------------------------------------------

Arrays Constantes - Um array sempre será constante. Ou seja, não será possível adicionar,
ou alterar algum valor que já foi atribuído no mesmo. 
-------------------------------------------------------------

Foreach - Coleta todas as posições do array, independente do valor;
For/while - Pois é possível controlar da forma que será trabalhada as posições;
--------------------------------------------------------------

Passar paramêtros por cópia, sempre mantém o valor que foi predefinido.
Passar por refrência, altera pelo valor que foi definido posteriormente.
---------------------------------------------------------------

Função anônima e Função tradicional são Callables, no caso são possíveis de serem chamadas.
(is_callable)
---------------------------------------------------------------

Recursividade, é nada mais que, pegar um problema maior, e ir quebrando em um problema menor
---------------------------------------------------------------

Ponto positivo para retornar uma função dentro de outra, é se caso a função seja muito pesada,
podemos deixa-lá em segunda instância, e assim que a primeira função for compilada, passamos
para a segunda função, pois assim o sistema não "pesa" no processamento!
----------------------------------------------------------------

Map e Filter
O Map serve para transformar um array em outro array, e cada elemento pode ser transformado 
apartir de uma função.

O Filter serve para transformar um array em outro array, que denomina as informações como 
Verdadeiro ou falso e retorna apenas o verdadeiro.
------------------------------------------------------------------

Paradigmas
 Não Estruturado (GoTo)
 Procedural
 Funcional
 Orientação a Objetos


Procedural X Orientação a Objetos

 Procedural é focado na função(receber os dados, alterar os dados e retornar)

 Orientação Objeto é focado no Objeto

Exemplo:

Procedural -  função recebe o paramêtro, faz um tipo de tratamento, e devolve o resultado, onde pode
ser aplicado em outro dado, ou função.. Mas se o valor for passado por referência, dentro da função
formatarData, será possível alterar o valor da memória e acaba modificando o conteúdo da variável, 
mesmo depois da chamada do método.
    
    formatarData(nascimento);

Orientação a Objeto - A classe cria um objeto,e  o objeto é um dado. E o objeto tem uma função ou método
e este método vai mexer nos atributos que pertencem aquele objeto., ou seja, o foco é o dado.

    nascimento->formatarData();
---------------------------------------------------------------------------

Pilares de Orientação a Objeto #01

    • Encapsulamento 
    • Herança 
    • Polimorfismo
    • Abstração

#01 ENCAPSULAMENTO

    Nada mais é que, não precisar entender a implementação interna de um objeto.
Como se fosse um caixa preta, onde dentro dela, encontram-se métodos e atributos, na qual
alguns são privados, e outro públicos, e com isso, basta entender como funciona a forma de 
implementação, da mesma forma que não precisamos entender o funcionamento total de um carro,
mas mesmo assim, com os "métodos e atributos" disponíveis, conseguimos controlar(dirigir) o carro.
Simplesmente, é só saber interagir com os objetos e métodos disponíveis, saber quais parametros
tais métodos recebem, que tipo de retorno ele irá devolver...

Modificadores de Acesso

    - Public, garante que o atributo/constante/método, que seja... Está disponível para todos.
    - Protected, garante que um determinado atributo está disponível dentro de sua própria classe,
    mas também é transmitido por HERANÇA.
    - Private, garante que aquele membro/atributo só está disponível dentro de sua própria classe;

#02 HERANÇA













